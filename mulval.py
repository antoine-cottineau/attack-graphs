from enum import Enum
import xml.etree.ElementTree as ET


class MulvalVertexType(Enum):
    """
    Enum class to represent the three possible types of
    nodes in a MulVAL vertex.
    """
    LEAF = 0
    OR = 1
    AND = 2


class MulvalAttackGraph:
    """
    Representation of the output of the MulVAL algorithm.
    """
    def __init__(self):
        self.vertices = {}
        self.N = 0
        self.ids = []

    def parse_from_file(self, path: str):
        """
        Parse an attack graph file at path.
        The file must have been generated by MulVAL and have an xml format.

        :param str path: The path of the xml file.
        """
        # Parse the file
        tree = ET.parse(path)
        root = tree.getroot()
        vertices = root.findall(path="vertices/vertex")
        arcs = root.findall(path="arcs/arc")

        # Create instances of MulvalVertex and fill them
        # with the parsed data
        for vertex in vertices:
            id_ = int(vertex.find("id").text)
            fact = vertex.find("fact").text
            metric = int(vertex.find("metric").text)
            type_ = MulvalVertexType[vertex.find("type").text]

            # Add a new instance to the vertices dictionnary
            self.vertices[id_] = MulvalVertex(id_, fact, metric, type_)

        # Update the size of the graph
        self.N = len(self.vertices)

        # Update the ids
        self.ids = [*self.vertices]

        # Use the arcs to fill the lists in_ and out of the vertices
        for arc in arcs:
            src = int(arc.find("src").text)
            dst = int(arc.find("dst").text)

            self.vertices[src].in_.append(dst)
            self.vertices[dst].out.append(src)


class MulvalVertex:
    """
    Representation of a vertex in the output of the MulVAL algorithm.
    """
    def __init__(self, id_: int, fact: str, metric: int,
                 type_: MulvalVertexType):
        self.id_ = id_
        self.fact = fact
        self.metric = metric
        self.type_ = type_

        self.in_ = []
        self.out = []
