import click
import numpy as np

from attack_graph import MulvalAttackGraph, AttackGraph
from clustering.white_smyth import Spectral1, Spectral2
from embedding.deepwalk import DeepWalk
from embedding.embedding import Embedding
from ranking.mehta import PageRankMethod, KuehlmannMethod


@click.group()
def run():
    pass


@run.command("")
@click.option(
    "-c",
    "--convert",
    is_flag=True,
    help="Whether or not the attack graph should be converted from a MulVAL to"
    " a standard attack graph.")
@click.option(
    "-r",
    "--ranking",
    type=click.Choice(["pagerank", "kuehlmann"]),
    help="Indicates if a ranking method should be applied and which method to"
    " apply.")
@click.option(
    "--cluster",
    type=click.Choice(["spectral1", "spectral2", "embedding"]),
    help="Indicates if a clustering method should be applied and which method"
    " to apply.")
@click.option(
    "--embedding",
    type=click.Path(exists=True),
    help="Indicates the path to an embedding file. The embedding can then be"
    " used for clustering.")
@click.argument("input", required=True)
@click.argument("output", required=True)
def draw(input: str, output: str, convert: bool, ranking: str, cluster: str,
         embedding: str):
    """
    Draws the attack graph xml file located at INPUT to OUTPUT.

    INPUT is the location of the attack graph xml file generated by MulVAL.
    OUTPUT is the location where the attack graph should be drawn. The
    extension of the path should be in [dot|pdf|png].
    """
    # Create the attack graph
    if convert:
        ag = AttackGraph()
    else:
        ag = MulvalAttackGraph()

    ag.import_from_mulval_xml_file(input)

    # Apply ranking
    if ranking == "pagerank":
        PageRankMethod(ag).apply()
    elif ranking == "kuehlmann":
        KuehlmannMethod(ag).apply()

    # Apply clustering
    if cluster == "spectral1":
        Spectral1(ag).apply(5)
    elif cluster == "spectral2":
        Spectral2(ag).apply(1, 9)
    elif cluster == "embedding":
        user_embedding = np.load(embedding)
        emb = Embedding(ag, user_embedding.shape[1])
        emb.embedding = user_embedding
        # TODO: find the optimal number of clusters
        emb.cluster_with_k_clusters(3)

    # Draw the resulting graph
    ag.draw(output)


@run.command()
@click.option("-d",
              "--dim_embedding",
              type=click.Choice(["8", "16", "32", "64"]),
              help="The dimension of the embedding.")
@click.argument("input", required=True)
def deepwalk(input: str, dim_embedding: str = "8"):
    """
    Applies Deepwalk to the attack graph located at INPUT. Saves the embedding
    at methods_output/deepwalk/embeddings.npy in a pickle file.

    INPUT is the location of the attack graph xml file generated by MulVAL.
    """
    # Create the attack graph
    ag = AttackGraph()
    ag.import_from_mulval_xml_file(input)

    # Apply DeepWalk
    DeepWalk(ag, int(dim_embedding)).run()


if __name__ == "__main__":
    run()
